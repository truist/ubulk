#!/bin/sh

# die on error (except in functions and various other circumstances)
# (we should be manually handling all possible errors, so this is "just in case")
set -e

# utility function; can't be in util.sh because we need it to find util.sh
check_for_relative_path() {
	echo "$1" | grep -q "^[^/]" >/dev/null 2>&1
	echo $?
}

# find the script's actual directory
if [ -n "$BASH_SOURCE" ]; then
	SOURCE="${BASH_SOURCE}"
else
	SOURCE="$0"
fi
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	if [ `check_for_relative_path $SOURCE` -eq 0 ]; then
		SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	fi
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

LIB_DIR="$SCRIPT_DIR/lib"

# load the hard-coded default settings
. "$LIB_DIR/defaults.conf"

# process the arguments
usage() {
	echo "usage: ubulk-build [--config=file] [--verbose]"
	exit 1
}
while [ $# -gt 0 ]; do
	case "$1" in
		--config=*)     CONFIG=`echo $1 | sed -e 's|^--config=||'` ;;
		--verbose)      set -x ;;
		-*)             usage ;;
		*)              usage ;;
	esac
	shift
done

# load the config file
if [ `check_for_relative_path $CONFIG` -eq 0 ]; then
	CONFIG="`pwd`/$CONFIG"
fi
if [ -f "$CONFIG" ]; then
	. "$CONFIG"
fi

# load the utility functions
. "$LIB_DIR/util.sh"

echo "Updating pkgsrc ($PKGSRC)..."
cd "$PKGSRC" && git pull || die $?

echo "Done!"
